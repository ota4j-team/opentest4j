/*
 * Copyright 2015-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentest4j;

import java.io.Serializable;

/**
 * {@code AssertionFailedError} is an <em>initial draft</em> for a common
 * base class for test-related {@link AssertionError AssertionErrors}.
 *
 * <p><strong>WARNING</strong>: this is a <em>work in progress</em> and
 * is therefore guaranteed to undergo heavy revisions in the near future
 * based on community feedback.
 *
 * @author Sam Brannen
 * @author Marc Philipp
 * @since 1.0
 */
public class AssertionFailedError extends AssertionError {

	private static final long serialVersionUID = 1L;

	private final Serializable expected;
	private final Serializable actual;

	public AssertionFailedError() {
		this(null);
	}

	public AssertionFailedError(String message) {
		this(message, Undefined.INSTANCE, Undefined.INSTANCE);
	}

	public AssertionFailedError(String message, Serializable expected, Serializable actual) {
		this(message, expected, actual, null);
	}

	public AssertionFailedError(String message, Throwable cause) {
		this(message, Undefined.INSTANCE, Undefined.INSTANCE, cause);
	}

	public AssertionFailedError(String message, Serializable expected, Serializable actual, Throwable cause) {
		super((message == null || message.trim().length() == 0) ? "" : message);
		initCause(cause);
		this.expected = expected;
		this.actual = actual;
	}

	public boolean isExpectedDefined() {
		return isDefined(this.expected);
	}

	public boolean isActualDefined() {
		return isDefined(this.actual);
	}

	public Serializable getExpected() {
		return (isExpectedDefined() ? this.expected : null);
	}

	public Serializable getActual() {
		return (isActualDefined() ? this.actual : null);
	}

	private boolean isDefined(Serializable actual) {
		return !Undefined.INSTANCE.equals(actual);
	}

	/**
	 * <em>Undefined</em> object, used to differentiate between a {@code null}
	 * default value and a user-supplied {@code null} value.
	 */
	private static class Undefined implements Serializable {

		private static final long serialVersionUID = 1L;
		private static final Undefined INSTANCE = new Undefined();

		private Undefined() {
		}

		@Override
		public boolean equals(Object obj) {
			return obj != null && this.getClass().equals(obj.getClass());
		}

		@Override
		public int hashCode() {
			return 42;
		}
	}
}
