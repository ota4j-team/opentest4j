/*
 * Copyright 2015-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentest4j;

import org.opentest4j.debug.DebugInformation;
import org.opentest4j.debug.DebuggableObject;

/**
 * A basic debuggable exception. That is an exception which might carry additional information for debugging purpose.
 * Typical usage is to provide actual and expected values upon test failures.
 *
 * @author Mark Michaelis
 * @since 1.0
 */
public class DebuggableException extends RuntimeException implements DebuggableObject {

	private static final long serialVersionUID = 1405415156020390125L;
	private final DebugInformation debugInformation;

	public DebuggableException() {
		this((DebugInformation) null);
	}

	public DebuggableException(String message) {
		this(message, (DebugInformation) null);
	}

	public DebuggableException(String message, Throwable cause) {
		this(message, null, cause);
	}

	public DebuggableException(Throwable cause) {
		this((DebugInformation) null, cause);
	}

	public DebuggableException(DebugInformation debugInformation) {
		this.debugInformation = debugInformation;
	}

	public DebuggableException(String message, DebugInformation debugInformation) {
		super(message);
		this.debugInformation = debugInformation;
	}

	public DebuggableException(String message, DebugInformation debugInformation, Throwable cause) {
		super(message, cause);
		this.debugInformation = debugInformation;
	}

	public DebuggableException(DebugInformation debugInformation, Throwable cause) {
		super(cause);
		this.debugInformation = debugInformation;
	}

	@Override
	public DebugInformation getDebugInformation() {
		return this.debugInformation;
	}

	@Override
	public boolean hasDebugInformation() {
		return this.debugInformation != null;
	}
}
