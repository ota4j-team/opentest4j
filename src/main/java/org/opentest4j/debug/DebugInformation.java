/*
 * Copyright 2015-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentest4j.debug;

import static java.util.Collections.unmodifiableSet;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/**
 * <p>
 * Object which carries information which might assist during debugging failed tests or even to understand the possible
 * defect just by the provided debug information. Typical
 * </p>
 * <p>
 * Debug information are immutable regarding their keys and their objects which are bound as values to the keys. The
 * values itself are not granted to be immutable. Nevertheless it is recommended for proper reporting that you provide
 * some immutable version of the given object. Otherwise the value might be different between raising the exception and
 * reporting the failure.
 * </p>
 * <p>
 * To create an immutable instance use the {@link #builder()} to create an instance of {@code DebugInformation}.
 * </p>
 *
 * @author Mark Michaelis
 * @since 1.0
 */
public class DebugInformation implements Serializable {

	private static final long serialVersionUID = -4561854355030078114L;
	/**
	 * Map from debug information keys to their wrappers, the ValueDescriptors. The ValueDescriptor grants some
	 * immutability of the contained object as it persists the string description upon instantiation.
	 */
	private final Map<String, ValueDescriptor> values;

	/**
	 * Constructor with the given debug information provided as map.
	 *
	 * @param values values; must be non-null
	 */
	private DebugInformation(Map<String, ValueDescriptor> values) {
		this.values = new HashMap<String, ValueDescriptor>(values);
	}

	/**
	 * Provide a builder instance to create an instance of {@code DebugInformation}.
	 *
	 * @return builder (always non-null)
	 */
	public static DebugInformationBuilder builder() {
		return new DebugInformationBuilder();
	}

	/**
	 * Returns a value descriptor for the given debug information key.
	 *
	 * @param key debug information key
	 * @return value descriptor or {@code null} iff. there is no debug information for the given key.
	 * @see #containsKey(String)
	 */
	public ValueDescriptor get(String key) {
		return this.values.get(key);
	}

	/**
	 * Test if a value descriptor for the given debug information key exists.
	 *
	 * @param key debug information key
	 * @return true iff. {@link #get(String)} for the given return will return a value different to {@code null}
	 */
	public boolean containsKey(String key) {
		return this.values.containsKey(key);
	}

	/**
	 * Get all available value ids.
	 *
	 * @return value ids, non-null
	 */
	public Set<String> keySet() {
		return unmodifiableSet(this.values.keySet());
	}

	/**
	 * Builder for debug information to provide upon failure.
	 *
	 * @author Mark Michaelis
	 * @since 1.0
	 */
	public static class DebugInformationBuilder {
		private Map<String, ValueDescriptor> values = new HashMap<String, ValueDescriptor>();

		private DebugInformationBuilder() {
			// Use builder() method to create instance.
		}

		/**
		 * Add a value for the given key. Will override any previous set value for the same key.
		 *
		 * @param key debug information key
		 * @param object object, might be {@code null}
		 * @return self-reference
		 */
		public DebugInformationBuilder put(String key, Object object) {
			this.values.put(key, ValueDescriptor.create(object));
			return this;
		}

		/**
		 * Create a more or less immutable debug information instance.
		 *
		 * @return debug information instance
		 */
		public DebugInformation build() {
			return new DebugInformation(this.values);
		}
	}
}
