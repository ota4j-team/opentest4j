/*
 * Copyright 2015-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentest4j.debug.serializer;

import java.io.Serializable;
import java.util.ServiceLoader;

/**
 * Utility class to locate all available ValueSerializers and use them in given order to try to provide a serializable
 * representation of an object.
 *
 * @author Mark Michaelis
 * @since 1.0
 */
public final class ValueSerializers {

	/**
	 * ServiceLoader for all available ValueSerializers.
	 */
	private static ServiceLoader<ValueSerializer> valueSerializers = ServiceLoader.load(ValueSerializer.class);

	/**
	 * Private constructor. This class is meant as utility class only and should not be instantiated.
	 */
	private ValueSerializers() {
		// Utility class; don't instantiate
	}

	/**
	 * Tries to provide a serializable representation for the given object.
	 *
	 * @param object object to find a serializable representation for; might be {@code null}
	 * @return serializable representation of the object or the object itself; might be {@code null} if no serializable
	 *         representation could be found
	 */
	public static Serializable serialize(Object object) {
		Serializable result = null;
		for (ValueSerializer valueSerializer : valueSerializers) {
			result = valueSerializer.serialize(object);
			if (result != null) {
				break;
			}
		}
		return result;
	}
}
