/*
 * Copyright 2015-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentest4j.fixtures;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Annotates fields that reference test fixtures or methods that return a test fixture. A field must be
 * public, non-static and a subtype of {@link TestFixture}. A method must be public and must return a subtype
 * of {@code TestFixture}. Fields and methods of this type are called Method Fixtures.
 *
 * <p>Method fixtures will be initialized before each test method in the class, and will
 * have their teardowns and postconditions called after each test method. The fixture
 * initiation occurs before any other method-based initialization (ex: {@code @Before} methods in JUnit)
 * and postconditions and teardowns are called after all  method-based tear downs
 * (ex: {@code After} methods in JUnit).
 *
 * <p>For example, here is a JUnit test class that creates a temporary directory before
 * each test method, and deletes it after each:
 * <pre>
 * public static class HasTempDirectory {
 *     &#064;Fixture
 *     public final TemporaryDirectory tmpDir = new TemporaryDirectory();
 *
 *     &#064;Test
 *     public void testUsingTempFolder() throws IOException {
 *         File createdFile = tmpDir.newFile(&quot;myfile.txt&quot;);
 *         File createdDir = tmpDir.newDirectory(&quot;subDir&quot;);
 *         // ...
 *     }
 * }
 * </pre>
 * <p>
 * And the same using a method.
 * <pre>
 * public static class HasTempDirectory {
 *     private final TemporaryDirectory tmpDir = new TemporaryDirectory();
 *
 *     &#064;Fixture
 *     public TemporaryFolder createTmpDitr() {
 *         return tmpDir;
 *     }
 *
 *     &#064;Test
 *     public void testUsingTempDirectory() throws IOException {
 *         File createdFile = tmpDir.newFile(&quot;myfile.txt&quot;);
 *         File createdDir = tmpDir.newDirectory(&quot;subDir&quot;);
 *         // ...
 *     }
 * }
 * </pre>
 *
 * @since 1.1
 */
@Retention(RetentionPolicy.RUNTIME)
@Target({ ElementType.FIELD, ElementType.METHOD })
public @interface Fixture {
}
