/*
 * Copyright 2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentest4j.fixtures;

import static java.util.Objects.requireNonNull;
import static org.opentest4j.fixtures.Utils.toUnmodifiableList;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.List;
import java.util.concurrent.locks.ReentrantLock;

/**
 * Simple wrapper around a {@link Method} and an object that has the method.
 *
 * @author Kevin Cooney
 * @since 1.1
 */
public class InstanceMethod {
	private final ReentrantLock lock = new ReentrantLock();
	private final ClassWrapper javaClass;
	private final Method method;
	private final Object object;
	private volatile List<Annotation> annotations;

	public InstanceMethod(ClassWrapper javaClass, Method method, Object object) {
		this.javaClass = requireNonNull(javaClass, "javaClass cannot be null");
		this.method = requireNonNull(method, "method cannot be null");
		this.object = requireNonNull(object, "object cannot be null");
	}

	public InstanceMethod(ClassWrapper javaClass, Method method, Object object, List<Annotation> methodAnnotations) {
		this(javaClass, method, object);
		this.annotations = toUnmodifiableList(requireNonNull(methodAnnotations, "methodAnnotations cannot be null"));
	}

	@Override
	public String toString() {
		return method.toString();
	}

    @Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + getAnnotations().hashCode();
		result = prime * result + javaClass.hashCode();
		result = prime * result + method.hashCode();
		result = prime * result + System.identityHashCode(object);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (!(obj instanceof InstanceMethod)) {
			return false;
		}
		InstanceMethod other = (InstanceMethod) obj;
		if (!javaClass.equals(other.javaClass)) {
			return false;
		}
		if (object != other.object) {
			return false;
		}
		if (!method.equals(other.method)) {
			return false;
		}
		if (annotations == other.annotations) {
			return true;
		}
		return getAnnotations().equals(other.getAnnotations());
	}

	/**
	 * Gets the underlying Java object.
	 */
	public Object getObject() {
		return object;
	}

	/**
	 * Gets the underlying Java method.
	 */
	public Method getMethod() {
		return method;
	}

	/**
	 * Gets a {@link ClassWrapper} for the class of the underlying Java method.
	 */
	public ClassWrapper getJavaClass() {
		return javaClass;
	}

	/**
	 * Gets the annotations on the underlying Java method.
	 */
	public List<Annotation> getAnnotations() {
		if (annotations == null) {
			lock.lock();
			try {
				if (annotations == null) {
					annotations = toUnmodifiableList(method.getAnnotations());
				}
			}
			finally {
				lock.unlock();
			}
		}
		return annotations;
	}
}
