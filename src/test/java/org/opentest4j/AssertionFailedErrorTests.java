/*
 * Copyright 2015-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentest4j;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.commons.codec.binary.Base64;
import org.junit.Test;

/**
 * Unit tests for {@link AssertionFailedError}.
 *
 * @author Marc Philipp
 * @author Sam Brannen
 * @since 1.0
 */
public class AssertionFailedErrorTests {

	private static final String EMPTY = "";
	private static final String BLANK = "   ";

	@Test
	public void defaultConstructorUsesEmptyMessage() {
		assertEquals(EMPTY, new AssertionFailedError().getMessage());
	}

	@Test
	public void nullMessageIsConvertedToEmptyMessage() {
		assertEquals(EMPTY, new AssertionFailedError(null).getMessage());
		assertEquals(EMPTY, new AssertionFailedError(null, null).getMessage());
		assertEquals(EMPTY, new AssertionFailedError(null, "foo", "bar").getMessage());
		assertEquals(EMPTY, new AssertionFailedError(null, "foo", "bar", null).getMessage());
	}

	@Test
	public void blankMessageIsConvertedToEmptyMessage() {
		assertEquals(EMPTY, new AssertionFailedError(BLANK).getMessage());
		assertEquals(EMPTY, new AssertionFailedError(BLANK, null).getMessage());
		assertEquals(EMPTY, new AssertionFailedError(BLANK, "foo", "bar").getMessage());
		assertEquals(EMPTY, new AssertionFailedError(BLANK, "foo", "bar", null).getMessage());
	}

	@Test
	public void toStringChecks() {
		String className = AssertionFailedError.class.getName();
		assertEquals(className, new AssertionFailedError().toString());
		assertEquals(className, new AssertionFailedError(null).toString());
		assertEquals(className, new AssertionFailedError(null, "foo", "bar").toString());
		assertEquals(className, new AssertionFailedError(null, new RuntimeException()).toString());
		assertEquals(className, new AssertionFailedError(null, "foo", "bar", new RuntimeException()).toString());

		assertEquals(className, new AssertionFailedError(EMPTY).toString());
		assertEquals(className, new AssertionFailedError(EMPTY, "foo", "bar").toString());
		assertEquals(className, new AssertionFailedError(EMPTY, new RuntimeException()).toString());
		assertEquals(className, new AssertionFailedError(EMPTY, "foo", "bar", new RuntimeException()).toString());

		assertEquals(className, new AssertionFailedError(BLANK).toString());
		assertEquals(className, new AssertionFailedError(BLANK, "foo", "bar").toString());
		assertEquals(className, new AssertionFailedError(BLANK, new RuntimeException()).toString());
		assertEquals(className, new AssertionFailedError(BLANK, "foo", "bar", new RuntimeException()).toString());

		assertEquals(className + ": message", new AssertionFailedError("message").toString());
		assertEquals(className + ": message", new AssertionFailedError("message", "foo", "bar").toString());
		assertEquals(className + ": message", new AssertionFailedError("message", new RuntimeException()).toString());
		assertEquals(className + ": message",
			new AssertionFailedError("message", "foo", "bar", new RuntimeException()).toString());
	}

	@Test
	public void messageAndCauseAreStored() {
		RuntimeException cause = new RuntimeException("cause");

		AssertionFailedError error = new AssertionFailedError("my message", cause);

		assertEquals("my message", error.getMessage());
		assertEquals(cause, error.getCause());
		assertFalse(error.isExpectedDefined());
		assertFalse(error.isActualDefined());
	}

	@Test
	public void expectedAndActualValuesAreStored() {
		AssertionFailedError errorWithExpectedAndActual = new AssertionFailedError(null, "foo", "bar");
		assertTrue(errorWithExpectedAndActual.isExpectedDefined());
		assertEquals("foo", errorWithExpectedAndActual.getExpected().getValue());
		assertTrue(errorWithExpectedAndActual.isActualDefined());
		assertEquals("bar", errorWithExpectedAndActual.getActual().getValue());
	}

	@Test
	public void returnsNullForExpectedAndActualWhenNotPassedToConstructor() {
		AssertionFailedError errorWithoutExpectedAndActual = new AssertionFailedError();
		assertFalse(errorWithoutExpectedAndActual.isExpectedDefined());
		assertNull(errorWithoutExpectedAndActual.getExpected());
		assertFalse(errorWithoutExpectedAndActual.isActualDefined());
		assertNull(errorWithoutExpectedAndActual.getActual());
	}

	@Test
	public void serializationWorksForAssertionFailedErrorWithMessageAndExpectedAndActualValues() throws Exception {
		AssertionFailedError error = serializeAndDeserialize(new AssertionFailedError("a message", "foo", "bar"));

		assertEquals("a message", error.getMessage());
		assertTrue(error.isExpectedDefined());
		assertEquals("foo", error.getExpected().getValue());
		assertTrue(error.isActualDefined());
		assertEquals("bar", error.getActual().getValue());
	}

	@Test
	public void serializationWorksForAssertionFailedErrorWithoutAnyValues() throws Exception {
		AssertionFailedError error = serializeAndDeserialize(new AssertionFailedError());

		assertEquals(EMPTY, error.getMessage());
		assertFalse(error.isExpectedDefined());
		assertNull(error.getExpected());
		assertFalse(error.isActualDefined());
		assertNull(error.getActual());
	}

	@Test
	public void deserializationOfAssertionFailedErrorWorksForVersion_1_0_0() throws Exception {
		// Generated using Base64.encodeBase64String(serialize(new AssertionFailedError("message", "foo", "bar"))) against 1.0.0
		final String serializedVersion_1_0_0 = "rO0ABXNyACNvcmcub3BlbnRlc3Q0ai5Bc3NlcnRpb25GYWlsZWRFcnJvcgAAAAAAAAABAgACTAAGYWN0dWFsdAAdTG9yZy9vcGVudGVzdDRqL1ZhbHVlV3JhcHBlcjtMAAhleHBlY3RlZHEAfgABeHIAGGphdmEubGFuZy5Bc3NlcnRpb25FcnJvcrptLqv9QT3mAgAAeHIAD2phdmEubGFuZy5FcnJvckUdNlaLgg5WAgAAeHIAE2phdmEubGFuZy5UaHJvd2FibGXVxjUnOXe4ywMABEwABWNhdXNldAAVTGphdmEvbGFuZy9UaHJvd2FibGU7TAANZGV0YWlsTWVzc2FnZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sACnN0YWNrVHJhY2V0AB5bTGphdmEvbGFuZy9TdGFja1RyYWNlRWxlbWVudDtMABRzdXBwcmVzc2VkRXhjZXB0aW9uc3QAEExqYXZhL3V0aWwvTGlzdDt4cHB0AAdtZXNzYWdldXIAHltMamF2YS5sYW5nLlN0YWNrVHJhY2VFbGVtZW50OwJGKjw8/SI5AgAAeHAAAAAXc3IAG2phdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudGEJxZomNt2FAgAESQAKbGluZU51bWJlckwADmRlY2xhcmluZ0NsYXNzcQB+AAZMAAhmaWxlTmFtZXEAfgAGTAAKbWV0aG9kTmFtZXEAfgAGeHAAAACRdAAob3JnLm9wZW50ZXN0NGouQXNzZXJ0aW9uRmFpbGVkRXJyb3JUZXN0c3QAHkFzc2VydGlvbkZhaWxlZEVycm9yVGVzdHMuamF2YXQAOmRlc2VyaWFsaXphdGlvbk9mQXNzZXJ0aW9uRmFpbGVkRXJyb3JXb3Jrc0ZvclZlcnNpb25fMV8wXzBzcQB+AA3////+dAAkc3VuLnJlZmxlY3QuTmF0aXZlTWV0aG9kQWNjZXNzb3JJbXBsdAAdTmF0aXZlTWV0aG9kQWNjZXNzb3JJbXBsLmphdmF0AAdpbnZva2Uwc3EAfgANAAAAPnEAfgATcQB+ABR0AAZpbnZva2VzcQB+AA0AAAArdAAoc3VuLnJlZmxlY3QuRGVsZWdhdGluZ01ldGhvZEFjY2Vzc29ySW1wbHQAIURlbGVnYXRpbmdNZXRob2RBY2Nlc3NvckltcGwuamF2YXEAfgAXc3EAfgANAAAB8nQAGGphdmEubGFuZy5yZWZsZWN0Lk1ldGhvZHQAC01ldGhvZC5qYXZhcQB+ABdzcQB+AA0AAAAydAApb3JnLmp1bml0LnJ1bm5lcnMubW9kZWwuRnJhbWV3b3JrTWV0aG9kJDF0ABRGcmFtZXdvcmtNZXRob2QuamF2YXQAEXJ1blJlZmxlY3RpdmVDYWxsc3EAfgANAAAADHQAM29yZy5qdW5pdC5pbnRlcm5hbC5ydW5uZXJzLm1vZGVsLlJlZmxlY3RpdmVDYWxsYWJsZXQAF1JlZmxlY3RpdmVDYWxsYWJsZS5qYXZhdAADcnVuc3EAfgANAAAAL3QAJ29yZy5qdW5pdC5ydW5uZXJzLm1vZGVsLkZyYW1ld29ya01ldGhvZHEAfgAgdAARaW52b2tlRXhwbG9zaXZlbHlzcQB+AA0AAAARdAAyb3JnLmp1bml0LmludGVybmFsLnJ1bm5lcnMuc3RhdGVtZW50cy5JbnZva2VNZXRob2R0ABFJbnZva2VNZXRob2QuamF2YXQACGV2YWx1YXRlc3EAfgANAAABRXQAHm9yZy5qdW5pdC5ydW5uZXJzLlBhcmVudFJ1bm5lcnQAEVBhcmVudFJ1bm5lci5qYXZhdAAHcnVuTGVhZnNxAH4ADQAAAE50AChvcmcuanVuaXQucnVubmVycy5CbG9ja0pVbml0NENsYXNzUnVubmVydAAbQmxvY2tKVW5pdDRDbGFzc1J1bm5lci5qYXZhdAAIcnVuQ2hpbGRzcQB+AA0AAAA5cQB+ADJxAH4AM3EAfgA0c3EAfgANAAABInQAIG9yZy5qdW5pdC5ydW5uZXJzLlBhcmVudFJ1bm5lciQzcQB+AC9xAH4AJXNxAH4ADQAAAEd0ACBvcmcuanVuaXQucnVubmVycy5QYXJlbnRSdW5uZXIkMXEAfgAvdAAIc2NoZWR1bGVzcQB+AA0AAAEgcQB+AC5xAH4AL3QAC3J1bkNoaWxkcmVuc3EAfgANAAAAOnEAfgAucQB+AC90AAphY2Nlc3MkMDAwc3EAfgANAAABDHQAIG9yZy5qdW5pdC5ydW5uZXJzLlBhcmVudFJ1bm5lciQycQB+AC9xAH4ALHNxAH4ADQAAAWtxAH4ALnEAfgAvcQB+ACVzcQB+AA0AAACJdAAab3JnLmp1bml0LnJ1bm5lci5KVW5pdENvcmV0AA5KVW5pdENvcmUuamF2YXEAfgAlc3EAfgANAAAARHQAKGNvbS5pbnRlbGxpai5qdW5pdDQuSlVuaXQ0SWRlYVRlc3RSdW5uZXJ0ABlKVW5pdDRJZGVhVGVzdFJ1bm5lci5qYXZhdAATc3RhcnRSdW5uZXJXaXRoQXJnc3NxAH4ADQAAAC90ADdjb20uaW50ZWxsaWoucnQuZXhlY3V0aW9uLmp1bml0LklkZWFUZXN0UnVubmVyJFJlcGVhdGVydAATSWRlYVRlc3RSdW5uZXIuamF2YXEAfgBIc3EAfgANAAAA8nQALGNvbS5pbnRlbGxpai5ydC5leGVjdXRpb24uanVuaXQuSlVuaXRTdGFydGVydAARSlVuaXRTdGFydGVyLmphdmF0ABZwcmVwYXJlU3RyZWFtc0FuZFN0YXJ0c3EAfgANAAAARnEAfgBNcQB+AE50AARtYWluc3IAJmphdmEudXRpbC5Db2xsZWN0aW9ucyRVbm1vZGlmaWFibGVMaXN0/A8lMbXsjhACAAFMAARsaXN0cQB+AAh4cgAsamF2YS51dGlsLkNvbGxlY3Rpb25zJFVubW9kaWZpYWJsZUNvbGxlY3Rpb24ZQgCAy173HgIAAUwAAWN0ABZMamF2YS91dGlsL0NvbGxlY3Rpb247eHBzcgATamF2YS51dGlsLkFycmF5TGlzdHiB0h2Zx2GdAwABSQAEc2l6ZXhwAAAAAHcEAAAAAHhxAH4AV3hzcgAbb3JnLm9wZW50ZXN0NGouVmFsdWVXcmFwcGVyAAAAAAAAAAECAARJABBpZGVudGl0eUhhc2hDb2RlTAAUc3RyaW5nUmVwcmVzZW50YXRpb25xAH4ABkwABHR5cGV0ABFMamF2YS9sYW5nL0NsYXNzO0wABXZhbHVldAAWTGphdmEvaW8vU2VyaWFsaXphYmxlO3hwNYHF83QAA2JhcnZyABBqYXZhLmxhbmcuU3RyaW5noPCkOHo7s0ICAAB4cHEAfgBcc3EAfgBYIPojwXQAA2Zvb3EAfgBecQB+AGA=";

		AssertionFailedError error = deserializeAndCheck(Base64.decodeBase64(serializedVersion_1_0_0));

		assertEquals("message", error.getMessage());
		assertTrue(error.isExpectedDefined());
		assertEquals("foo", error.getExpected().getValue());
		assertTrue(error.isActualDefined());
		assertEquals("bar", error.getActual().getValue());
	}

	private AssertionFailedError serializeAndDeserialize(AssertionFailedError originalError) throws Exception {
		byte[] bytes = serialize(originalError);
		return deserializeAndCheck(bytes);
	}

	private AssertionFailedError deserializeAndCheck(byte[] bytes) throws Exception {
		Object deserializedObject = deserialize(bytes);
		assertEquals(AssertionFailedError.class, deserializedObject.getClass());
		return (AssertionFailedError) deserializedObject;
	}

	private Object deserialize(byte[] bytes) throws Exception {
		ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(bytes));
		return in.readObject();
	}

	private byte[] serialize(Object object) throws Exception {
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		ObjectOutputStream out = new ObjectOutputStream(byteArrayOutputStream);
		out.writeObject(object);
		out.flush();
		return byteArrayOutputStream.toByteArray();
	}

}
