/*
 * Copyright 2015-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentest4j;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.junit.Test;

/**
 * Unit tests for {@link AssertionFailedError}.
 *
 * @author Marc Philipp
 * @author Sam Brannen
 * @since 1.0
 */
public class AssertionFailedErrorTests {

	@Test
	public void nullMessageIsConvertedToEmptyString() {
		assertEquals("", new AssertionFailedError().getMessage());
		assertEquals("", new AssertionFailedError(null).getMessage());
		assertEquals("", new AssertionFailedError(null, null).getMessage());
		assertEquals("", new AssertionFailedError(null, "foo", "bar").getMessage());
		assertEquals("", new AssertionFailedError(null, "foo", "bar", null).getMessage());
	}

	@Test
	public void blankMessageIsConvertedToEmptyString() {
		assertEquals("", new AssertionFailedError("   ").getMessage());
		assertEquals("", new AssertionFailedError("   ", null).getMessage());
		assertEquals("", new AssertionFailedError("   ", "foo", "bar").getMessage());
		assertEquals("", new AssertionFailedError("   ", "foo", "bar", null).getMessage());
	}

	@Test
	public void expectedAndActualValuesAreStored() {
		AssertionFailedError errorWithExpectedAndActual = new AssertionFailedError(null, "foo", "bar");
		assertTrue(errorWithExpectedAndActual.isExpectedDefined());
		assertEquals("foo", errorWithExpectedAndActual.getExpected().getValue());
		assertTrue(errorWithExpectedAndActual.isActualDefined());
		assertEquals("bar", errorWithExpectedAndActual.getActual().getValue());
	}

	@Test
	public void returnsNullForExpectedAndActualWhenNotPassedToConstructor() {
		AssertionFailedError errorWithoutExpectedAndActual = new AssertionFailedError();
		assertFalse(errorWithoutExpectedAndActual.isExpectedDefined());
		assertNull(errorWithoutExpectedAndActual.getExpected());
		assertFalse(errorWithoutExpectedAndActual.isActualDefined());
		assertNull(errorWithoutExpectedAndActual.getActual());
	}

	@Test
	public void serializationWorksForAssertionFailedErrorWithMessageAndExpectedAndActualValues() throws Exception {
		AssertionFailedError error = serializeAndDeserialize(new AssertionFailedError("a message", "foo", "bar"));

		assertEquals("a message", error.getMessage());
		assertTrue(error.isExpectedDefined());
		assertEquals("foo", error.getExpected().getValue());
		assertTrue(error.isActualDefined());
		assertEquals("bar", error.getActual().getValue());
	}

	@Test
	public void serializationWorksForAssertionFailedErrorWithoutAnyValues() throws Exception {
		AssertionFailedError error = serializeAndDeserialize(new AssertionFailedError());

		assertEquals("", error.getMessage());
		assertFalse(error.isExpectedDefined());
		assertNull(error.getExpected());
		assertFalse(error.isActualDefined());
		assertNull(error.getActual());
	}

	private AssertionFailedError serializeAndDeserialize(AssertionFailedError originalError) throws Exception {
		byte[] bytes = serialize(originalError);
		Object deserializedObject = deserialize(bytes);
		assertEquals(AssertionFailedError.class, deserializedObject.getClass());
		return (AssertionFailedError) deserializedObject;
	}

	private Object deserialize(byte[] bytes) throws Exception {
		ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(bytes));
		return in.readObject();
	}

	private byte[] serialize(Object object) throws Exception {
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		ObjectOutputStream out = new ObjectOutputStream(byteArrayOutputStream);
		out.writeObject(object);
		out.flush();
		return byteArrayOutputStream.toByteArray();
	}

}
