/*
 * Copyright 2015-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentest4j.debug.serializer;

import static java.util.Collections.singletonMap;
import static org.junit.Assert.*;
import static org.opentest4j.TestSerializationHelper.serializeAndDeserialize;

import java.io.Serializable;

import org.junit.Before;
import org.junit.Test;

/**
 * @author Mark Michaelis
 * @since 1.0
 */
public class AbstractValueWrapperTest {

	private MockValueWrapper valueWrapper;

	@Before
	public void setUp() throws Exception {
		this.valueWrapper = new MockValueWrapper();
	}

	@Test
	public void initialDataAreEmpty() throws Exception {
		assertTrue(this.valueWrapper.getData().isEmpty());
	}

	@Test
	public void canAddData() throws Exception {
		Serializable previous = this.valueWrapper.putData("foo", "bar");
		assertNull("no previous", previous);
		assertEquals("bar", this.valueWrapper.getData().get("foo"));
	}

	@Test
	public void canAddMultipleDataAtOnce() throws Exception {
		this.valueWrapper.putAllData(singletonMap("foo", "bar"));
		assertEquals("bar", this.valueWrapper.getData().get("foo"));
	}

	@Test
	public void canReplaceData() throws Exception {
		this.valueWrapper.putData("foo", "bar");
		Serializable previous = this.valueWrapper.putData("foo", "rab");
		assertEquals("previous", "bar", previous);
		assertEquals("rab", this.valueWrapper.getData().get("foo"));
	}

	@Test
	public void canSerializeAndDeserialize() throws Exception {
		this.valueWrapper.putData("foo", "bar");
		ValueWrapper deserialized = (ValueWrapper) serializeAndDeserialize(this.valueWrapper);
		assertEquals("bar", deserialized.getData().get("foo"));
	}

	private static final class MockValueWrapper extends AbstractValueWrapper {
		private static final long serialVersionUID = -4870613106734206014L;

		@Override
		public Object getValue() {
			return null;
		}
	}
}
