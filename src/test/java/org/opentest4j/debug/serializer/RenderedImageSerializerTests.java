/*
 * Copyright 2015-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentest4j.debug.serializer;

import static java.awt.image.BufferedImage.TYPE_BYTE_GRAY;
import static org.junit.Assert.*;

import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.Serializable;

import org.junit.Before;
import org.junit.Test;
import org.opentest4j.TestFixtures.SomeNonSerializable;
import org.opentest4j.TestFixtures.SomeSerializable;
import org.opentest4j.TestSerializationHelper;

/**
 * Tests {@link RenderedImageSerializer}.
 *
 * @author Mark Michaelis
 * @since 1.0
 */
public class RenderedImageSerializerTests {

	private BufferedImage originalImage;
	private ValueSerializer serializer;

	@Before
	public void setUp() throws Exception {
		this.originalImage = new BufferedImage(1, 1, TYPE_BYTE_GRAY);
		this.serializer = new RenderedImageSerializer();
	}

	@Test
	public void canSerializeWrappedImage() throws Exception {
		Serializable serializable = this.serializer.serialize(this.originalImage);

		assertNotNull("Should have provided serializable image representation.", serializable);

		Object deserializedObject = TestSerializationHelper.serializeAndDeserialize(serializable);

		assertTrue("Deserialized result should be some ValueWrapper: " + deserializedObject.getClass(),
			deserializedObject instanceof ValueWrapper);

		ValueWrapper wrapper = (ValueWrapper) deserializedObject;
		Object wrappedValue = wrapper.getValue();

		assertTrue("Wrapped value should be some RenderedImage: " + wrappedValue.getClass(),
			wrappedValue instanceof RenderedImage);
		RenderedImage deserializedImage = (RenderedImage) wrappedValue;
		assertEquals("width", this.originalImage.getWidth(), deserializedImage.getWidth());
		assertEquals("height", this.originalImage.getHeight(), deserializedImage.getHeight());
	}

	@Test
	public void nullShouldNotBeSerialized() throws Exception {
		Serializable serializable = this.serializer.serialize(null);
		assertNull(serializable);
	}

	@Test
	public void shouldNotProvideSerializableForNonSerializableNonImage() throws Exception {
		Serializable serializable = this.serializer.serialize(new SomeNonSerializable());
		assertNull(serializable);
	}

	@Test
	public void shouldNotProvideSerializableForSerializableNonImage() throws Exception {
		Serializable serializable = this.serializer.serialize(new SomeSerializable());
		assertNull(serializable);
	}
}
